% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_cell_colors.R
\name{create_cell_colors}
\alias{create_cell_colors}
\title{Create a cell color pallet for plots}
\usage{
create_cell_colors(
  cell_types = c("Astro", "Micro", "Endo", "Oligo", "OPC", "Excit", "Inhib", "Other"),
  pallet_name = c("classic", "gg", "tableau"),
  pallet = NULL,
  split = NA,
  preview = FALSE
)
}
\arguments{
\item{cell_types}{A \code{character()} vector listing unique cell types.}

\item{pallet_name}{A \code{character(1)} indicating choice of included pallets:
\itemize{
\item \code{"classic"}: classic set of 8 cell type colors from LIBD, checked for
visability and color blind accessibility. Default pallet.
\item \code{"gg"} : mimic colors automatically picked by ggplot.
\item \code{"tableau"} : 20 distinct colors from tableau color pallet, good for
large number of cell type.
}}

\item{pallet}{A \code{character()} vector listing user provided color pallet. If
provided, overrides pallet selection with pallet_name.}

\item{split}{delineating \code{character(1)} after which suffixes will be ignored.
This is useful for cases when say \code{A.1} and \code{A.2} are both to be considered
as cell type \code{A} (here \code{split = "\\\\."}).}

\item{preview}{A \code{logical(1)} indicating whether to make a plot to preview
the colors.}
}
\value{
A named \code{character()} vector of R and hex color values compatible
with \code{ggplot2:scale_color_manual()}.
}
\description{
This function returns a \code{character()} vector with valid R colors for a given
input \code{character()} of unique cell types. These were colors that have been
useful in our experience.
}
\examples{
## create cell colors with included pallets
create_cell_colors(pallet_name = "classic")
create_cell_colors(pallet_name = "classic", preview = TRUE)
create_cell_colors(pallet_name = "tableau", preview = TRUE)

## use custom colors
my_colors <- c("darkorchid4", "deeppink4", "aquamarine3", "darkolivegreen1")
create_cell_colors(cell_type = c("A", "B", "C", "D"), 
                   pallet = my_colors, 
                   preview = TRUE)
                   
## use Rcolor brewer
create_cell_colors(cell_type = c("A", "B", "C"), 
                   pallet = RColorBrewer::brewer.pal(n = 3, name = "Set1"),
                   previe = TRUE)

## Options for subtype handling
## Provide unique colors for cell subtypes (DEFAULT)
create_cell_colors(
    cell_types = c("A.1", "A.2", "B.1", "C", "D"),
    pallet_name = "classic",
    preview = TRUE
)

## Provide gradient colors for A.1 and A.2 by using the "split" argument
## returns a base cell type color & subtype colors
create_cell_colors(
    cell_types = c("A.1", "A.2", "B.1", "C", "D"),
    split = "\\\\.",
    pallet_name = "classic",
    preview = TRUE
)

## try with custom colors
create_cell_colors(
    cell_types = c("A.1", "A.2", "B.1", "C", "D"),
    split = "\\\\.",
    pallet = my_colors,
    preview = TRUE
)

}
